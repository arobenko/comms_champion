//
// Copyright 2021 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>
#include <iostream>
#include <iomanip>

#include "comms/comms.h"
#include "comms/protocol/checksum/BasicSum.h"
#include "comms/protocol/checksum/Crc.h"

#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class CustomChecksumLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > LeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    using BeField = comms::Field<comms::option::BigEndian>;
    using LeField = comms::Field<comms::option::LittleEndian>;

    template <typename TField, std::size_t TSize>
    using SyncField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::DefaultNumValue<0xabcd>
        >;

    template <typename TField>
    using SyncField2 = SyncField<TField, 2>;
    using BeSyncField2 = SyncField2<BeField>;
    using LeSyncField2 = SyncField2<LeField>;

    template <typename TField, std::size_t TSize, std::size_t TOffset = 0>
    using SizeField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::NumValueSerOffset<static_cast<std::intmax_t>(TOffset)>
        >;

    template <typename TField>
    using SizeField20 = SizeField<TField, 2, 0>;
    using BeSizeField20 = SizeField20<BeField>;
    using LeSizeField20 = SizeField20<LeField>;

    template <typename TField, std::size_t TLen>
    using IdField =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<TLen>
        >;

    template <typename TField>
    using IdField1 = IdField<TField, 1>;
    using BeIdField1 = IdField1<BeField>;
    using LeIdField1 = IdField1<LeField>;

    enum class ChecksumType : std::uint8_t
    {
        Sum,
        Crc16,
        Crc_CCITT,
        NumOfValues
    };

    template <typename TField, std::size_t TLen>
    using ChecksumTypeField =
        comms::field::EnumValue<
            TField,
            ChecksumType,
            comms::option::FixedLength<TLen>
        >;

    template <typename TField>
    using ChecksumtypeField1 = ChecksumTypeField<TField, 1>;
    using BeChecksumtypeField1 = ChecksumtypeField1<BeField>;
    using LeChecksumtypeField1 = ChecksumtypeField1<LeField>;

    template <typename TField, std::size_t TLen>
    using ChecksumField =
        comms::field::IntValue<
            TField,
            typename comms::util::SizeToType<TLen>::Type
        >;

    template <typename TField>
    using ChecksumField2 = ChecksumField<TField, 2U>;
    using BeChecksumField2 = ChecksumField2<BeField>;
    using LeChecksumField2 = ChecksumField2<LeField>;

    typedef std::tuple<
        BeChecksumtypeField1
    > ExtraTransport;

    template <typename TTraits>
    using ExtraTransportFieldsTraits = 
        std::tuple<
            TTraits,
            comms::option::ExtraTransportFields<ExtraTransport>
        >;

    using BeExtraTransportFieldsTraits = ExtraTransportFieldsTraits<BeTraits>;
    using LeExtraTransportFieldsTraits = ExtraTransportFieldsTraits<LeTraits>;

    template <typename TTraits>
    struct ExtraTransportMessageBase : public TestMessageBase<TTraits>
    {
        using Base = TestMessageBase<TTraits>;

    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(checksumType);
    };

    using BeMsgBase = ExtraTransportMessageBase<BeExtraTransportFieldsTraits>;
    using LeMsgBase = ExtraTransportMessageBase<LeExtraTransportFieldsTraits>;

    using BeMsg1 = Message1<BeMsgBase>;

    template <
          typename TField,
          typename TNextLayer,
          typename... TOptions>
    class CustomChecksumLayer : public
        comms::protocol::ChecksumLayer<
            TField,
            comms::protocol::checksum::Crc_16,
            TNextLayer,
            comms::option::ExtendingClass<CustomChecksumLayer<TField, TNextLayer, TOptions...> >,
            TOptions...
        >
    {
        using Base = 
            comms::protocol::ChecksumLayer<
                TField,
                comms::protocol::checksum::Crc_16,
                TNextLayer,
                comms::option::ExtendingClass<CustomChecksumLayer<TField, TNextLayer, TOptions...> >,
                TOptions...
            >;
    public:

        using Field = typename Base::Field;

        template <typename TMsg>
        static std::size_t doFieldLength(const TMsg& msg)
        {
            auto checksumType = msg.transportField_checksumType().value();
            if (checksumType == ChecksumType::Sum) {
                return sizeof(std::uint8_t);
            }

            return Base::doFieldLength(msg);
        }


        template <typename TMsg, typename TIter>
        static comms::ErrorStatus readField(const TMsg* msgPtr, Field& field, TIter& iter, std::size_t len)
        {
            if (msgPtr == nullptr) {
                return comms::ErrorStatus::ProtocolError;
            }

            auto checksumType = msgPtr->transportField_checksumType().value();
            if (checksumType != ChecksumType::Sum) {
                return Base::readField(msgPtr, field, iter, len);
            }

            using FieldTmp = comms::field::IntValue<typename Field::FieldBase, std::uint8_t>;
            FieldTmp fieldTmp;
            auto es = fieldTmp.read(iter, len);
            if (es != comms::ErrorStatus::Success) {
                return es;
            }

            field = comms::field_cast<Field>(fieldTmp);
            return es;
        }

        template <typename TMsg, typename TIter>
        static comms::ErrorStatus writeField(const TMsg* msgPtr, const Field& field, TIter& iter, std::size_t len)
        {
            if (msgPtr == nullptr) {
                return comms::ErrorStatus::ProtocolError;
            }

            auto checksumType = msgPtr->transportField_checksumType().value();
            if (checksumType != ChecksumType::Sum) {
                return Base::writeField(msgPtr, field, iter, len);
            }

            using FieldTmp = comms::field::IntValue<typename Field::FieldBase, std::uint8_t>;
            auto fieldTmp = comms::field_cast<FieldTmp>(field);
            return fieldTmp.write(iter, len);
        }


        template <typename TMsg, typename TIter>
        static typename Field::ValueType calculateChecksum(const TMsg* msgPtr, TIter& iter, std::size_t len, bool& checksumValid)
        {
            if (msgPtr == nullptr) {
                static constexpr bool Should_not_happen = false;
                static_cast<void>(Should_not_happen);
                COMMS_ASSERT(Should_not_happen);
                checksumValid = false;
                return static_cast<typename Field::ValueType>(0);
            }

            checksumValid = true;
            auto checksumType = msgPtr->transportField_checksumType().value();
            if (checksumType == ChecksumType::Sum) {
                using Calc = comms::protocol::checksum::BasicSum<std::uint8_t>;
                return Calc()(iter, len);
            }

            if (checksumType == ChecksumType::Crc16) {
                using Calc = comms::protocol::checksum::Crc_16;
                return Calc()(iter, len);
            }        

            if (checksumType == ChecksumType::Crc_CCITT) {
                using Calc = comms::protocol::checksum::Crc_CCITT;
                return Calc()(iter, len);
            }        

            checksumValid = false;
            return static_cast<typename Field::ValueType>(0);
        }    
    };    

    template <
        typename TSyncField, 
        typename TChecksumField, 
        typename TSizeField, 
        typename TIdField, 
        typename TChecksumTypeField,
        typename TMessage>
    struct ProtocolStack : public
        comms::protocol::SyncPrefixLayer<
            TSyncField,
            CustomChecksumLayer<
                TChecksumField,
                comms::protocol::MsgSizeLayer<
                    TSizeField,
                    comms::protocol::MsgIdLayer<
                        TIdField,
                        TMessage,
                        AllMessages<TMessage>,
                        comms::protocol::TransportValueLayer<
                            TChecksumTypeField,
                            0,
                            comms::protocol::MsgDataLayer<>
                        >
                    >
                >
            >
        >
    {
#ifdef COMMS_MUST_DEFINE_BASE
        using Base =
            comms::protocol::SyncPrefixLayer<
                TSyncField,
                CustomChecksumLayer<
                    TChecksumField,
                    comms::protocol::MsgSizeLayer<
                        TSizeField,
                        comms::protocol::MsgIdLayer<
                            TIdField,
                            TMessage,
                            AllMessages<TMessage>,
                            comms::protocol::TransportValueLayer<
                                TChecksumTypeField,
                                0,
                                comms::protocol::MsgDataLayer<>
                            >
                        >
                    >
                >
            >;
#endif
    public:
        COMMS_PROTOCOL_LAYERS_ACCESS_OUTER(sync, checksum, size, id, checksumType, payload);
    };
};

void CustomChecksumLayerTestSuite::test1()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), // sync
        0x0, 0x4, // size
        MessageType1, // id
        static_cast<char>(ChecksumType::Sum), // checksum type
        0x01, 0x02, // payload
        0x07 // checksum
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField2,
            BeSizeField20,
            BeIdField1,
            BeChecksumtypeField1,
            BeMsgBase
        > Stack;

    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void CustomChecksumLayerTestSuite::test2()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), // sync
        0x0, 0x4, // size
        MessageType1, // id
        static_cast<char>(ChecksumType::Crc16), // checksum type
        0x01, 0x02, // payload
        0x51, 0x20 // checksum
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField2,
            BeSizeField20,
            BeIdField1,
            BeChecksumtypeField1,
            BeMsgBase
        > Stack;

    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}
