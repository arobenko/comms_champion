//
// Copyright 2014 - 2018 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class MsgIdLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();

private:

    struct CommonTraits
    {
        typedef MessageType MsgIdType;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
    };

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::ValidCheckInterface,
        comms::option::LengthInfoInterface
    > CommonOptions;


    typedef std::tuple<
        comms::option::BigEndian,
        CommonOptions
    > BeTraits;

    typedef std::tuple<
        comms::option::LittleEndian,
        CommonOptions
    > LeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    typedef TestMessageBase<BeTraits> BeMsgBase;
    typedef TestMessageBase<LeTraits> LeMsgBase;
    typedef comms::Message<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef BeMsgBase::Field BeField;
    typedef LeMsgBase::Field LeField;

    typedef Message1<BeMsgBase> BeMsg1;
    typedef Message1<LeMsgBase> LeMsg1;
    typedef Message2<BeMsgBase> BeMsg2;
    typedef Message2<LeMsgBase> LeMsg2;
    typedef Message3<BeMsgBase> BeMsg3;
    typedef Message3<LeMsgBase> LeMsg3;
    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;


    template <typename TField>
    using Field1 =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<1>
        >;

    template <typename TField>
    using Field2 =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<2>
        >;

    template <typename TField>
    using Field3 =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<3>
        >;

    typedef Field1<BeField> BeField1;
    typedef Field1<LeField> LeField1;
    typedef Field2<BeField> BeField2;
    typedef Field2<LeField> LeField2;
    typedef Field3<BeField> BeField3;
    typedef Field3<LeField> LeField3;

    template <typename TField, typename TMessage>
    class ProtocolStack : public
        comms::protocol::MsgIdLayer<
            TField,
            TMessage,
            AllMessages<TMessage>,
            comms::protocol::MsgDataLayer<>
        >
    {
        using Base =
            comms::protocol::MsgIdLayer<
                TField,
                TMessage,
                AllMessages<TMessage>,
                comms::protocol::MsgDataLayer<>
            >;
    public:
        COMMS_PROTOCOL_LAYERS_ACCESS_OUTER(id, payload);
    };

    template <typename TField, typename TMessage>
    class InPlaceProtocolStack : public
        comms::protocol::MsgIdLayer<
            TField,
            TMessage,
            AllMessages<TMessage>,
            comms::protocol::MsgDataLayer<>,
            comms::option::InPlaceAllocation
        >
    {
        using Base =
            comms::protocol::MsgIdLayer<
                TField,
                TMessage,
                AllMessages<TMessage>,
                comms::protocol::MsgDataLayer<>,
                comms::option::InPlaceAllocation
            >;
    public:
        COMMS_PROTOCOL_LAYERS_ACCESS(payload, id);
    };
};

void MsgIdLayerTestSuite::test1()
{
    static const char Buf[] = {
        MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<BeField1, BeMsgBase> stack;
    static_cast<void>(stack.layer_id());
    auto& payloadLayer = stack.layer_payload();
    using PayloadLayerType = typename std::decay<decltype(payloadLayer)>::type;
    static_assert(comms::protocol::isMsgDataLayer<PayloadLayerType>(), "Invalid layer");

    auto& idLayer = static_cast<const ProtocolStack<BeField1, BeMsgBase>&>(stack).layer_id();
    using IdLayerType = typename std::decay<decltype(idLayer)>::type;
    static_assert(comms::protocol::isMsgIdLayer<IdLayerType>(), "Invalid layer");

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);

    InPlaceProtocolStack<BeField1, BeMsgBase> inPlaceStack;
    auto& inPlacePayloadLayer = inPlaceStack.layer_payload();
    using InPlacePayloadLayerType = typename std::decay<decltype(inPlacePayloadLayer)>::type;
    static_assert(comms::protocol::isMsgDataLayer<InPlacePayloadLayerType>(), "Invalid layer");

    auto& inPlaceIdLayer = static_cast<const InPlaceProtocolStack<BeField1, BeMsgBase>&>(inPlaceStack).layer_id();
    using InPlaceIdLayerType = typename std::decay<decltype(inPlaceIdLayer)>::type;
    static_assert(comms::protocol::isMsgIdLayer<InPlaceIdLayerType>(), "Invalid layer");


    auto msgPtr2 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType1);
    auto& msg2 = dynamic_cast<BeMsg1&>(*msgPtr2);
    TS_ASSERT_EQUALS(std::get<0>(msg2.fields()).value(), 0x0102);

    TS_ASSERT_EQUALS(msg1, msg2);

    auto msgPtr3 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize, comms::ErrorStatus::MsgAllocFailure);
    TS_ASSERT(!msgPtr3);
}

void MsgIdLayerTestSuite::test2()
{
    BeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    static const char ExpectedBuf[] = {
        0x0, MessageType1, 0x02, 0x03
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;

    char buf[BufSize] = {0};

    ProtocolStack<BeField2, BeMsgBase> stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, &ExpectedBuf[0]);

    InPlaceProtocolStack<BeField2, BeMsgBase> inPlaceStack;
    commonWriteReadMsgTest(inPlaceStack, msg, buf, BufSize, &ExpectedBuf[0]);
}

void MsgIdLayerTestSuite::test3()
{
    static const char Buf[] = {
        MessageType2, 0, 0
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<LeField3, LeMsgBase> stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType2);
    auto& msg1 = dynamic_cast<LeMsg2&>(*msgPtr);

    InPlaceProtocolStack<LeField3, LeMsgBase> inPlaceStack;
    auto msgPtr2 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType2);
    auto& msg2 = dynamic_cast<LeMsg2&>(*msgPtr2);
    TS_ASSERT_EQUALS(msg1, msg2);

    auto msgPtr3 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize, comms::ErrorStatus::MsgAllocFailure);
    TS_ASSERT(!msgPtr3);
}


void MsgIdLayerTestSuite::test4()
{
    static const char Buf[] = {
        0x0, UnusedValue1, 0x00, 0x00
    };

    static const auto BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<BeField2, BeMsgBase> stack;
    auto msgPtr = commonReadWriteMsgTest(stack, Buf, BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!msgPtr);

    InPlaceProtocolStack<BeField2, BeMsgBase> inPlaceStack;
    auto inPlaceMsgPtr = commonReadWriteMsgTest(inPlaceStack, Buf, BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!inPlaceMsgPtr);
}

void MsgIdLayerTestSuite::test5()
{
    BeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    char buf[2] = {0};
    static const auto BufSize = std::extent<decltype(buf)>::value;

    ProtocolStack<BeField3, BeMsgBase> stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);

    InPlaceProtocolStack<BeField3, BeMsgBase> inPlaceStack;
    commonWriteReadMsgTest(inPlaceStack, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);
}

void MsgIdLayerTestSuite::test6()
{
    ProtocolStack<BeField2, BeMsgBase> stack;

    auto msgPtr = stack.createMsg(MessageType3);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType3);
    TS_ASSERT(!msgPtr->valid());
    auto* msg3 = dynamic_cast<BeMsg3*>(msgPtr.get());
    TS_ASSERT(msg3 != nullptr);
}

void MsgIdLayerTestSuite::test7()
{
    static const char Buf[] = {
        MessageType1, 0x0, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef ProtocolStack<LeField2, LeMsgBase> ProtStack;
    ProtStack::AllFields fields;
    ProtStack stack;

    auto msgPtr = commonReadWriteMsgTest(stack, fields, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<LeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0201);
    TS_ASSERT_EQUALS(stack.accessCachedField(fields).value(), MessageType1);
    TS_ASSERT_EQUALS(stack.nextLayer().accessCachedField(fields).value(), std::vector<std::uint8_t>({0x01, 0x02}));

    typedef InPlaceProtocolStack<LeField2, LeMsgBase> InPlaceProtStack;
    InPlaceProtStack::AllFields fields2;
    InPlaceProtStack inPlaceStack;
    auto msgPtr2 = commonReadWriteMsgTest(inPlaceStack, fields2, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType1);
    auto& msg2 = dynamic_cast<LeMsg1&>(*msgPtr2);
    TS_ASSERT_EQUALS(std::get<0>(msg2.fields()).value(), 0x0201);

    TS_ASSERT_EQUALS(msg1, msg2);
    TS_ASSERT_EQUALS(fields, fields2);
}

void MsgIdLayerTestSuite::test8()
{
    static const char Buf[] = {
        MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using ProtStack = ProtocolStack<BeField1, BeNonPolymorphicMessageBase>;
    ProtStack stack;
    NonPolymorphicBeMsg1 msg;
    TS_ASSERT_EQUALS(msg.doGetId(), MessageType1);
    commonReadWriteMsgDirectTest(stack, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);

    ProtStack::AllFields fields;
    commonReadWriteMsgDirectTest(stack, fields, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(fields).value(), MessageType1);

    NonPolymorphicBeMsg2 msg2;
    TS_ASSERT_EQUALS(msg2.doGetId(), MessageType2);
    commonReadWriteMsgDirectTest(stack, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);

    ProtStack::AllFields fields2;
    std::get<0>(fields2).value() = MessageType5; // just to make sure it is updated.
    commonReadWriteMsgDirectTest(stack, fields2, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT_EQUALS(std::get<0>(fields2).value(), MessageType1);
}
