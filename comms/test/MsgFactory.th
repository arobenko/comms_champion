//
// Copyright 2019 - 2021 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "comms/dispatch.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class MsgFactoryTestSuite : public CxxTest::TestSuite
{
public:

    void test1();


    struct Interface1 : public
        comms::Message<
            comms::option::def::MsgIdType<MessageType>,
            comms::option::def::BigEndian
        >
    {
        // Virtual destructor for dynamic_cast support
        virtual ~Interface1() = default;
    };

    using Msg1 = Message1<Interface1>;
    using Msg2 = Message2<Interface1>;
    using Msg3 = Message3<Interface1>;
    using Msg4 = Message4<Interface1>;

    template <typename TAllMessages>
    using MsgFactoryPolymorphic = comms::MsgFactory<Interface1, TAllMessages, comms::option::app::ForceDispatchPolymorphic>;

    template <typename TAllMessages>
    using MsgFactoryStaticBinSearch = comms::MsgFactory<Interface1, TAllMessages, comms::option::app::ForceDispatchStaticBinSearch>;

    template <typename TAllMessages>
    using MsgFactoryLinearSwitch = comms::MsgFactory<Interface1, TAllMessages, comms::option::app::ForceDispatchLinearSwitch>;


    template <typename TFactory>
    void testInvalidId(MessageType id)
    {
        TFactory factory;
        auto msg = factory.createMsg(id);
        TS_ASSERT(!msg);
    }

    template <typename TFactory, typename TMsg>
    void testValidId(MessageType id)
    {
        TFactory factory;
        auto msg = factory.createMsg(id);
        TS_ASSERT(msg);
        TS_ASSERT(dynamic_cast<TMsg*>(msg.get()) != nullptr);
    }

};

void MsgFactoryTestSuite::test1()
{

    do {
        using AllMessages = std::tuple<>;

        testInvalidId<MsgFactoryPolymorphic<AllMessages> >(MessageType1);
        testInvalidId<MsgFactoryStaticBinSearch<AllMessages> >(MessageType1);
        testInvalidId<MsgFactoryLinearSwitch<AllMessages> >(MessageType1);
    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Msg1
            >;

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg1>(MessageType1);

        testInvalidId<MsgFactoryPolymorphic<AllMessages> >(MessageType2);
        testInvalidId<MsgFactoryStaticBinSearch<AllMessages> >(MessageType2);
        testInvalidId<MsgFactoryLinearSwitch<AllMessages> >(MessageType2);
    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Msg1,
                Msg2
            >;

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg1>(MessageType1);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg2>(MessageType2);

        testInvalidId<MsgFactoryPolymorphic<AllMessages> >(MessageType3);
        testInvalidId<MsgFactoryStaticBinSearch<AllMessages> >(MessageType3);
        testInvalidId<MsgFactoryLinearSwitch<AllMessages> >(MessageType3);
    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Msg1,
                Msg2,
                Msg3
            >;

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg1>(MessageType1);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg2>(MessageType2);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg3>(MessageType3);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg3>(MessageType3);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg3>(MessageType3);

        testInvalidId<MsgFactoryPolymorphic<AllMessages> >(MessageType4);
        testInvalidId<MsgFactoryStaticBinSearch<AllMessages> >(MessageType4);
        testInvalidId<MsgFactoryLinearSwitch<AllMessages> >(MessageType4);
    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Msg1,
                Msg2,
                Msg3,
                Msg4
            >;

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg1>(MessageType1);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg1>(MessageType1);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg2>(MessageType2);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg2>(MessageType2);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg3>(MessageType3);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg3>(MessageType3);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg3>(MessageType3);

        testValidId<MsgFactoryPolymorphic<AllMessages>, Msg4>(MessageType4);
        testValidId<MsgFactoryStaticBinSearch<AllMessages>, Msg4>(MessageType4);
        testValidId<MsgFactoryLinearSwitch<AllMessages>, Msg4>(MessageType4);

        testInvalidId<MsgFactoryPolymorphic<AllMessages> >(MessageType5);
        testInvalidId<MsgFactoryStaticBinSearch<AllMessages> >(MessageType5);
        testInvalidId<MsgFactoryLinearSwitch<AllMessages> >(MessageType5);
    } while (false);
}

