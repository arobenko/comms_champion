/// @page page_handler_tutorial Handling Messages Tutorial
/// @tableofcontents
/// @section page_handler_tutorial_intro Introduction
/// When a message is received over I/O link and successfully deserialised, it 
/// needs to be dispatched to appropriate handling function. Usually the developers
/// write quite big (depends on number of messages it needs to handle) @b switch
/// statement that checks the ID of the message and calls appropriate function
/// in the relevant @b case area. Such approach is very inefficient in terms of
/// execution performance as well as development effort required to 
/// introduce a new message when protocol evolves. 
///
/// There is much better approach that uses "Double-Dispatching" idiom. @n
/// First of
/// all, let's assume there is a base/interface class, common for all the messages,
/// and there is a @b dispatch() member function, that is responsible to dispatch
/// the message for appropriate handling function in the handler object.
/// @code
/// // Forward declaration of the message handling class.
/// class MyHandler;
///
/// class MyMessage
/// {
/// public:
///     typedef MyHandler Handler;
///
///     void dispatch(Handler& handler)
///     {
///         dispatchImpl(handler);
///     }
/// 
/// protected:
///     virtual void dispatchImpl(Handler& handler) = 0;
/// };
/// @endcode
/// And there is a handler class that implements @b handle() member function
/// for every possible message class. Let's say we have custom message classes:
/// @b Message1, @b Message2, @b Message3, ...
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(Message1& msg) {...}
///     void handle(Message2& msg) {...}
///     void handle(Message3& msg) {...}
///     ...
/// };
/// @endcode
/// Then having the same statement <b>"handler.handle(*this);"</b> in the
/// @b dispatchImpl() function of every custom class will do the job of dispatching
/// the message into appropriate @b handle() handling function.
/// @code
/// class Message1 : public MyMessage
/// {
/// protected:
///     virtual void dispatchImpl(Handler& handler) 
///     {
///         handler.handle(*this); // Will call handle(Message1&) function of the handler
///     }
/// };
///
/// class Message2 : public MyMessage
/// {
/// protected:
///     virtual void dispatchImpl(Handler& handler) 
///     {
///         handler.handle(*this); // Will call handle(Message2&) function of the handler
///     }
/// };         
/// @endcode
/// Now, let's assume we hold the message object by the pointer to its interface.
/// The invocation of @b dispatch() member function will dispatch the message
/// to appropriate handling function of the handler object.
/// @code
/// std::unique_ptr<MyMessage> msg(.../* some message object */);
/// MyHandler handler;
///
/// msg->dispatch(handler); // appropriate "handle()" member function in the handler will be invoked
/// @endcode
/// Please <b>PAY ATTENTION</b>, that when defining @b MyMessage interface class,
/// there is a need for the handler function to be only <b>forward declared</b>.
/// However, when the actual message is defined (@b Message1, @b Message2, etc...)
/// there is a need for the interface of the handler class to be known, i.e. the
/// header file that defines the @b MyHandler class must be included. Otherwise,
/// the compiler will complain about not being able to invoke @b handle() function
/// of the handler.
///
/// @section page_handler_tutorial_selective Selective Handling
/// There may be a case when not all possible messages need to be handled. 
/// In this case, the handler class must
/// define @b handle() functions for all the messages it is interested to handle,
/// and to have single fall back function for all the rest. @n
/// For example, only @b Message1 needs to be handled and all other messages need
/// to be ignored.
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(Message1& msg) {...}
///     void handle(MyMessage& msg) {} // Fall back function to be invoked for the rest of the messages
/// };
/// @endcode
/// @b Note, that when compiling the implementation of Message1, the compiler
/// will invoke <b>handle(Message1& msg)</b> function, because this is the best
/// matching variant for all the available @b handle() functions. For all the
/// rest, <b>handle(MyMessage& msg)</b> will be chosen, because @b MyMessage is
/// the base class of all the messages, and there is no other better matching
/// variant available.
///
/// @section page_handler_tutorial_multiple_handlers Multiple Handlers
/// There may be a need for being able to dispatch message for multiple handlers. 
/// However, there is a need to at least declare the type of the handler before
/// defining message interface class. The type of the handler must be known
/// in order to properly define @b dispatch() member function. It would be
/// very impractical to duplicate the code of the every message just for different
/// handler. Thankfully, nothing prevents us from making @b MyHandler handler
/// class an abstract base class with virtual @b handle() functions, while
/// multiple handler classes may inherit from it an still be passed as a parameter
/// to the same @b dispatch member function of the message.
/// @code
/// class MyHandler
/// {
/// public:
///     virtual void handle(Message1& msg) = 0;
///     virtual void handle(Message2& msg) = 0;
///     virtual void handle(Message3& msg) = 0;
///     ...
/// };
/// @endcode
/// Defining the concrete handlers:
/// @code
/// class Handler1 : public MyHandler
/// {
/// public:
///     virtual void handle(Message1& msg) override {...};
///     virtual void handle(Message2& msg) override {...};
///     virtual void handle(Message3& msg) override {...};
///     ...
/// };
///
/// class Handler2 : public MyHandler
/// {
/// public:
///     virtual void handle(Message1& msg) override {...};
///     virtual void handle(Message2& msg) override {...};
///     virtual void handle(Message3& msg) override {...};
///     ...
/// };
/// @endcode
/// Now, any of the handlers may be used to handle the message:
/// @code
/// std::unique_ptr<MyMessage> msg(.../* some message object */);
/// Handler1 handler1;
/// Handler2 handler2;
///
/// msg->dispatch(handler1); // Handle with handler1
/// msg->dispatch(handler2); // Handle with handler2
/// @endcode
///
/// @section page_handler_tutorial_generic Generic Handling
/// The COMMS library provides some help in defining custom message handlers.
/// There is comms::GenericHandler class that receives at least two template
/// parameters. The first one is a common interface class for all the messages
/// (@b MyMessage in the examples above). The second template parameter is
/// all the types of all the custom messages the handler is supposed to handle,
/// bundled into std::tuple.
/// @code
/// typedef std::tuple<
///     Message1,
///     Message2,
///     Message3,
///     ...
/// > AllMessages;
/// @endcode
/// As the result the comms::GenericHandler implements @b virtual @b handle()
/// function for all the provided messages including the provided interface one,
/// where the default implementation of the "fall back" handling is empty and
/// the default implementation of every other function is to invoke the "fall back"
/// function. It looks something like this:
/// @code
/// template<>
/// class GenericHandler<MyMessage, AllMessages>
/// {
/// public:
///     virtual void handle(MyMessage& msg) {} // Do nothing
///
///     virtual void handle(Message1& msg)
///     {
///         this->handle(static_cast<MyMessage&>(msg)); // invoke default handling
///     }
///
///     virtual void handle(Message2& msg)
///     {
///         this->handle(static_cast<MyMessage&>(msg)); // invoke default handling
///     }
///
///     ...
/// };
/// @endcode
/// Now, what remains is to inherit from comms::GenericHandler and override
/// the functions that need to be overridden:
/// @code
/// class MyHandler : public comms::GenericHandler<MyMessage, AllMessages>
/// {
/// public:
///     // Enable polymorphic delete
///     virtual ~MyHandler() {}
///
///     // Overriding the "fall back" handling function
///     virtual handle(MyMessage& msg) override
///     {
///         std::cout << "Ignoring message with ID: " << msg.getId() << std::endl;
///     }
///
///     // Overriding handling of Message1
///     virtual handle(Message1& msg) override
///     {
///         ...; // Handle Message1
///     }
/// };
/// @endcode
/// @b NOTE, that comms::GenericHandler doesn't declare its destructor as virtual.
/// If the handler object requires support for polymorphic delete (destruction),
/// make sure to declare its destructor as virtual.
///
/// @section page_handler_tutorial_return_value Returning Handling Result
/// All the examples above used @b void as a return type from handling functions. It
/// is possible, however, to return value of handling result. In order to achieve
/// this the handler class needs to define inner @b RetType type and all the
/// @b handle() functions must return it. For example:
/// @code
/// class MyHandler
/// {
/// public:
///     // Return type of all the handle() functions
///     typedef bool RetType;
///
///     bool handle(Message1& msg) {...}
///     bool handle(Message2& msg) {...}
///     bool handle(Message3& msg) {...}
///     ...
/// };
/// @endcode
/// If inner @b RetType type is defined, it is propagated to be also the return type of
/// the @ref comms::Message::dispatch() member function as well. As the result the developer may 
/// use constructs like this:
/// @code
/// bool result = msg.dispatch(handler);
/// @endcode
///
/// NOTE, that @ref comms::GenericHandler class has a third template parameter, which
/// defaults to @b void, and may be used to specify the return type of its handling functions.
///

