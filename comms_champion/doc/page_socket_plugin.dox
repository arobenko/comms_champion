/// @page page_socket_plugin Developing Custom Socket Plugin
/// @tableofcontents
/// The @b socket plugin is responsible to send the data over I/O link when
/// requested as well as report any incoming data via callback. The 
/// <a href="https://github.com/commschamp/comms_champion">CommsChampion Project</a>
/// contains implementation of multiple available 
/// <a href="https://github.com/commschamp/comms_champion/tree/master/comms_champion/plugin">plugins</a>
/// It is recommended to follow this tutorial while looking at available examples. The
/// easy ones are <a href="https://github.com/commschamp/comms_champion/tree/master/comms_champion/plugin/null_socket">null_socket</a>
/// and <a href="https://github.com/commschamp/comms_champion/tree/master/comms_champion/plugin/echo_socket">echo_socket</a>
/// 
/// @section page_socket_plugin_socket_class Socket Class
/// To implement the required functionality the plugin's code must define its
/// socket class inheriting from comms_champion::Socket. 
/// @code
/// class MySocket : public comms_champion::Socket
/// {
///     ...
/// };
/// @endcode
/// If socket implementation uses QT5 signals/slots infrastructure, it can use
/// multiple inheritance and extend @b QObject as well.
/// @code
/// class MySocket : public QObject, public comms_champion::Socket
/// {
///     Q_OBJECT
///     ...
/// private slots:
///     ...
/// };
/// @endcode
/// The comms_champion::Socket class is implemented using  
/// <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface">Non-Virtual Interface Idiom</a>
/// It's non-virtual public interface is used by the driving application. The
/// inheriting class needs to implement virtual @b *Impl() functions to override
/// the default behaviour.
///
/// @subsection page_socket_plugin_connection Connection / Disconnection
/// The actual socket class is expected to override virtual 
/// comms_champion::Socket::socketConnectImpl() and comms_champion::Socket::socketDisconnectImpl()
/// functions.
/// @code
/// class MySocket : public comms_champion::Socket
/// {
/// public:
///     MySocket();
/// protected:
///     virtual bool socketConnectImpl() override;
///     virtual void socketDisconnectImpl() override;
/// };
/// @endcode
/// The @b connection request is used to open the device file or low level I/O socket,
/// as well as to connect to remote host in case of network socket, such as
/// <a href="https://github.com/commschamp/comms_champion/tree/master/comms_champion/plugin/tcp_socket/client">TCP/IP Client</a>.
///
/// When @b disconnection request comes in, the socket object is expected to
/// disconnect from remote host (if applicable), and close the low level I/O socket.
///
/// Sometimes the unsolicited low level I/O socket disconnection can be detected.
/// In this case, the socket object must use inherited 
/// comms_champion::Socket::reportDisconnected() member function to report it
/// to the running application. The latter will report it to the user.
/// 
/// @b NOTE, that during requested disconnection (inside overriden @b socketDisconnectImpl())
/// the socket class must NOT report the disconnection using the decribed above
/// function. It should be used only to report @b unsolicited one.
///
/// @subsection page_socket_plugin_data_recv Data Reception
/// The @b socket object is expected to detect and report incoming data. It must
/// be done @b asynchronously, hence it is recommended to use available signal/slot
/// mechanism provided by the QT5 framework. However, if can also be done
/// using other third party code. In this case it is recommended to do such thing
/// in separate thread (especially if there are blocking calls involved) and communicate 
/// the updates to the main thread using the same signal/slot facility.
///
/// When new data arrival is detected, the @b socket object needs to report it 
/// using inherited comms_champion::Socket::reportDataReceived() function. Note,
/// that the latter receives single parameter of type comms_champion::DataInfoPtr.
/// It is @b std::shared_ptr to comms_champion::DataInfo. Please use 
/// comms_champion::makeDataInfo() function to allocate one. The comms_champion::DataInfo
/// contains three data members:
/// @li @b m_timestamp - timestamp when data is received
/// @li @b m_data - raw bytes data
/// @li @b m_extraProperties - optional extra information about the data.
/// 
/// @code
/// class MySocket : public ...
/// {
/// private:
///     // internal member function to be called when new data arrives
///     void dataReceived(const std::uint8_t* buf, std::size_t len)
///     {
///         auto data = comms_champion::makeDataInfo();
///         data->m_timestamp = comms_champion::DataInfo::TimestampClock::now();
///         data->m_data.assign(buf, buf + len);
///         reportDataReceived(std::move(data));
///     }
/// };
/// @endcode
/// @b NOTE, that the assignment of the @b m_timestamp value can be omitted. If no
/// value has been set, the inherited @b reportDataReceived() function will assign
/// the value returned by call to `comms_champion::DataInfo::TimestampClock::now()` prior
/// to invoking the callback to report the data to the application.
///
/// Also note, that there is @b m_extraProperties data member which can contain
/// any extra information about the data. For example, the IP address and port 
/// the data has arrived from in case of network socket. Such extra information 
/// can be reported by the driving application when reporting received message details.
/// For example, take a look at 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/comms_champion/plugin/tcp_socket/server/Socket.cpp">TCP/IP Server Socket</a> implementation.
/// 
/// @subsection page_socket_plugin_data_send Sending Data
/// The socket object receives requests to send outgoing data using call to
/// overridden virtual @b sendDataImpl() (see comms_champion::Socket::sendDataImpl()).
/// @code
/// class MySocket : public ...
/// {
/// protected:
///     virtual void sendDataImpl(comms_champion::DataInfoPtr dataPtr) override
///     {
///         ... // write contents of dataPtr->m_data to I/O socket.
///     }
/// };
/// @endcode
/// Note, that the parameter to the function is the same std::shared_ptr to
/// comms_champion::DataInfo. In addition to raw data bytes in may also contain
/// extra properties. Depending on the socket, these properties can be used by the
/// other plugins (@b filters and/or @b protocol) to provide extra information on
/// how the data needs to be sent. For example, it can specify whether 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/comms_champion/plugin/udp_socket/Socket.cpp">UDP/IP Socket</a>
/// needs to broadcast the provided data or send it directly to currently connected
/// remote endpoint.
///
/// @subsection page_socket_plugin_errors Reporting Errors
/// If there is any error discovered, the socket object is expected to report 
/// them using inherited comms_champion::Socket::reportError() member function.
///
/// @section page_socket_plugin_plugin_class Plugin Class
/// Please read the @ref page_plugin page first to understand the way the 
/// plugins are defined.
///
/// The @b socket plugin must provide a callback to allocate the 
/// @b Socket object (the one that is derived from comms_champion::Socket).
/// @code
/// class EchoSocketPlugin : public comms_champion::Plugin
/// {
///     Q_OBJECT
///     Q_PLUGIN_METADATA(IID "cc.EchoSocketPlugin" FILE "echo_socket.json")
///     Q_INTERFACES(comms_champion::Plugin)
///
/// public:
///     EchoSocketPlugin()
///     {
///         pluginProperties()
///             .setSocketCreateFunc(
///                 [this]()
///                 {
///                     return makeEchoSocket();
///                 });
///     }
///             
///     ...
/// };
/// @endcode
/// If the socket requires configuration, please also provide a callback which
/// creates the widget when invoked (see @ref page_plugin_properties_config_widget).


