/// @page page_fields_properties Defining Fields' Properties
/// @tableofcontents
/// The comms_champion::property::field namespace contains definition of
/// multiple classes that are expected to be used to define fields properties.
/// For example, let's take a look at definition of @b field1 of 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/EnumValues.h">EnumValues</a>
/// message of the @b demo protocol. The properties for such field can be
/// defined as:
/// @code
/// QVariantMap props = 
///     comms_champion::property::field::EnumValue()
///         .name("field1")
///         .add("Value1")
///         .add("Value2")
///         .add("Value3")
///         .asMap();    
/// @endcode
/// @b NOTE the final call to @b asMap() member function to retrieved the
/// set properties as @b QVariantMap.
///
/// In general, the name of the properties setting
/// class is the same as the field's class name from the @b COMMS library. What differs is
/// their respective namespaces.
/// @li Use comms_champion::property::field::IntValue to define properties for @b comms::field::IntValue field.
/// @li Use comms_champion::property::field::EnumValue to define properties for @b comms::field::EnumValue field.
/// @li Use comms_champion::property::field::BitmaskValue to define properties for @b comms::field::BitmaskValue field.
/// @li Use comms_champion::property::field::Bitfield to define properties for @b comms::field::Bitfield field.
/// @li Use comms_champion::property::field::Bundle to define properties for @b comms::field::Bundle field.
/// @li Use comms_champion::property::field::String to define properties for @b comms::field::String field.
/// @li Use comms_champion::property::field::ArrayList to define properties for @b comms::field::ArrayList field.
/// @li Use comms_champion::property::field::Optional to define properties for @b comms::field::Optional field.
/// @li Use comms_champion::property::field::FloatValue to define properties for @b comms::field::FloatValue field.
/// @li Use comms_champion::property::field::Variant to define properties for @b comms::field::Variant field.
///
/// The @b comms_champion library also provides the alias type
/// (@ref comms_champion::property::field::ForField) which can be used
/// to retrieve the right properties definition type, based on the type of the
/// field. For example, the
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/EnumValues.cpp">cc_plugin/message/EnumValues.cpp</a>
/// file contains the following code that defines properties for earlier mentioned 
/// @b field1 field of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/EnumValues.h">EnumValues</a>
/// message of the @b demo protocol.
/// @code
/// namespace cc = comms_champion;
/// ...
/// cc::property::field::ForField<EnumValuesFields::field1>()
///     .name("field1")
///     .add("Value1")
///     .add("Value2")
///     .add("Value3")
///     .asMap();
/// @endcode
/// Please note, that every "setter" function in every properties definition
/// class returns reference to itself (`return *this`). It allows the 
/// application of settings "one on top of another", just like in the example
/// above.
///
/// @section page_fields_properties_common Common Properties
/// All the mentioned earlier properties definition classes inherit from
/// comms_champion::property::field::CommonBase, which in turn inherits from
/// comms_champion::property::field::Common. These classes provide set/get
/// functionality of all the properties common to all the fields. They are:
/// @li @b name (see comms_champion::property::field::CommonBase::name())
/// @li @b hidden (see comms_champion::property::field::CommonBase::hidden())
/// @li @b readOnly (see comms_champion::property::field::CommonBase::readOnly())
/// @li @b serialisedHidden (see comms_champion::property::field::CommonBase::serialisedHidden())
///
/// @subsection page_fields_properties_common_name "Name" Property
/// Every field has a name. The @b cc_view (main GUI application of the
/// <b>CommsChampion Tools</b>) uses the provided "name" property value to
/// display the name of the field in the generated widget:
/// 
/// <img src="image/enum_value_field_name.png">
///
/// @subsection page_fields_properties_common_hidden "Hidden" Property
/// The @b cc_view application generated widget for every defined field of the
/// message and every contained member field for such complex fields as
/// @b comms::field::Bitfield or @b comms::field::Bundle. The "hidden" property
/// will hide the generated widget. It can be useful when defining some 
/// reserved fields, which don't need to be displayed.
/// 
/// @subsection page_fields_properties_common_read_only "Read Only" Property
/// The values of some fields may depend on values of some other fields. It may be 
/// useful to disallow manual update of such fields. Good example would be having
/// a field that shows number of elements in some other "list" field that 
/// appears later in the message. The contents of the former should not be allowed
/// to be updated manually. When "readOnly" property is set, the @b cc_view
/// application will disallow update of the relevant GUI elements.
///
/// @subsection page_fields_properties_common_serialised_hidden "Serialised Hidden" Property.
/// The @b cc_view application generated a widget for every field containing
/// two parts. The left one contains value in human readable form, while right
/// part contains raw byte(s) of the same value but serialised. The 
/// "serialisedHidden" property can be used to hide the right (serialised) part
/// of the widget. It can be useful when displaying complex fields. For example,
/// @b field2 of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message. It is defined to be a fixed size list (3 elements) of 
/// @b int16_t values (@b comms::field::IntValue<...> fields). If the 
/// "serialisedHidden" property is NOT set neither on the list, nor on
/// the int fields, the generated widget will contain duplicate information
/// on serialised values. It will look like this:
///
/// <img src="image/lists_dup_info.png">
/// 
/// It is up to developer to decide what "serialised" part to hide, whether it is
/// of the list itself, or of the integer fields it contains.
///
/// @section page_fields_properties_int_value Properties for comms::field::IntValue
/// In addition to @ref page_fields_properties_common, the 
/// comms_champion::property::field::IntValue object has several of its own.
///
/// @subsection page_fields_properties_int_value_display_offset "Display Offset" Property
/// The @b COMMS library provides and ability to add a numeric offset to
/// the value of @b comms::field::IntValue field when the latter is serialised.
/// By default, the left-hand side of the field's widget displays the real 
/// value the field contains. Sometimes it is required to display such value
/// with additional offset added to it. For example, the @b demo protocol defines
/// is transport wrapping data as:
/// @code
/// SYNC | LENGTH | ID | PAYLOAD | CHECKSUM
/// @endcode
/// The @b LENGTH value is defined to contain the remaining length @b including
/// size of the @b CHECKSUM. However, the protocol stack is defined to have
/// @b CHECKSUM layer wrapping the @b LENGTH one. As the result the real value of 
/// the "length" field doesn't include length of the @b CHECKSUM value (see
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/Stack.h">Stack.h</a>).
/// @code
/// using LengthField =
///     comms::field::IntValue<
///         FieldBase,
///         std::uint16_t,
///         comms::option::NumValueSerOffset<sizeof(std::uint16_t)>
///     >;
/// @endcode
///
/// When displaying such field, the latter should also add "2" to its displayed
/// value (see 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/TransportMessage.cpp">cc_plugin/TransportMessage.cpp</a>).
/// @code
/// QVariantList createFieldsProperties()
/// {
///     ...
///     props.append(
///         cc::property::field::ForField<LengthField>()
///             .name("LENGTH")
///             .displayOffset(2)
///             .asMap());
///     ...
/// }
/// @endcode
/// See definition of comms_champion::property::field::IntValue::displayOffset()
/// for more details.
///
/// @subsection page_fields_properties_int_value_scaled_decimals "Scaled Decimals" Property
/// Many communcation protocols avoid serialisation of the floating point values.
/// Instead they introduce scaling factor and use multiplication / division 
/// operations to convert such floating point values to integral one prior to
/// serialisation. Such fields may be defined using @b comms::field::IntValue
/// classes (see @b field3 in 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/FloatValues.h">FloatValues</a>
/// message definition).
/// @code
///     // Floating point value serialised as integer with (1e-2) scaling ratio.
///     using field3 =
///         comms::field::IntValue<
///             FieldBase,
///             std::uint8_t,
///             comms::option::ScalingRatio<1, 100>
///         >;
/// @endcode 
/// However, sometimes it is desired to present it as floating point field
/// to the user. In this case there is a need to provide information about
/// how many digits need to be displayed after the decimal point (see
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/FloatValues.cpp">cc_plugin/message/FloatValues.cpp</a>
/// ).
/// @code
/// QVariantList createFieldsProperties()
/// {
///     ...
///     props.append(
///         cc::property::field::ForField<FloatValuesFields::field3>()
///             .name("field3")
///             .scaledDecimals(2)
///             .asMap());
///     ...
/// }
/// @endcode 
/// See definition of comms_champion::property::field::IntValue::scaledDecimals()
/// for more details.
///
/// @section page_fields_properties_enum_value Properties for comms::field::EnumValue
/// In addition to @ref page_fields_properties_common, the 
/// comms_champion::property::field::EnumValue object is expected to provide
/// names to the enum values the @b comms::field::EnumValue field may contain. 
/// To add such information
/// comms_champion::property::field::EnumValue::add() functions may be used.
/// As an example let's take a look at @b field1 of the
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/EnumValues.h">EnumValues</a>
/// message. Its enum type is defined to be
/// @code
/// enum class ValuesField1 : std::uint8_t
/// {
///     Value1, 
///     Value2, 
///     Value3, 
///     NumOfValues
/// };
/// @endcode
/// The first value starts at 0 and every next value is greater by 1 than
/// the previous one. The properties of such field are defined in the following
/// way (see
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/EnumValues.cpp">cc_plugin/message/EnumValues.cpp</a>
/// ).
/// @code
/// QVariantList createFieldsProperties()
/// {
///     QVariantList props;
///     props.append(
///         cc::property::field::ForField<EnumValuesFields::field1>()
///             .name("field1")
///             .add("Value1")
///             .add("Value2")
///             .add("Value3")
///             .asMap());
///     ...
/// }
/// @endcode
///
/// As a second example let's take a look at @b field2 of the
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/EnumValues.h">EnumValues</a>
/// message. Its enum type is defined to be
/// @code
/// enum class ValuesField2 : std::int16_t
/// {
///     Value1 = -5, 
///     Value2 = 100,
///     Value3 = 130,
///     Value4 = 1028
/// };
/// @endcode
/// The properties of such enum field are defined in the following way (see
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/EnumValues.cpp">cc_plugin/message/EnumValues.cpp</a>
/// ).
/// @code
/// QVariantList createFieldsProperties()
/// {
///     ...
///     props.append(
///         cc::property::field::ForField<EnumValuesFields::field2>()
///             .name("field2")
///             .add("Value1", (int)EnumValuesFields::ValuesField2::Value1)
///             .add("Value2", (int)EnumValuesFields::ValuesField2::Value2)
///             .add("Value3", (int)EnumValuesFields::ValuesField2::Value3)
///             .add("Value4", (int)EnumValuesFields::ValuesField2::Value4)
///             .asMap());
///     ...
/// }
/// @endcode
/// Please note the availability of two comms_champion::property::field::EnumValue::add()
/// member functions. One of them receives numeric value of enumerator, the other
/// doesn't. The latter just takes the latest inserted value, adds 1 to it and
/// inserts the result as new one.
///
/// @section page_fields_properties_bitmask_value Properties for comms::field::BitmaskValue
/// In addition to @ref page_fields_properties_common, the 
/// comms_champion::property::field::BitmaskValue object is expected to provide
/// names to the bits of the @b comms::field::BitmaskValue field.
/// To add such information
/// comms_champion::property::field::BitmaskValue::add() functions may be used.
/// The usage is very similar to @ref page_fields_properties_enum_value. For
/// examples please take a look at the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/BitmaskValues.h">BitmaskValues</a>
/// message fields definition and definition of the properties inside
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/BitmaskValues.cpp">cc_plugin/message/BitmaskValues.cpp</a>.
///
/// @section page_fields_properties_bitfield Properties for comms::field::Bitfield
/// In addition to @ref page_fields_properties_common, the 
/// comms_champion::property::field::Bitfield object is expected to provide
/// also properties of the contained member fields. The properties are added
/// using comms_champion::property::field::Bitfield::add() member function. Note,
/// that created properties are passed already converted to @b QVariantMap. 
/// For example, take a look at fields definitions of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Bitfields.h">Bitfields</a>
/// message and their properties assignment inside the
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Bitfields.cpp">cc_plugin/message/Bitfields.cpp</a>.
///
/// @section page_fields_properties_bundle Properties for comms::field::Bundle
/// Setting properties for @b comms::field::Bundle field is very similar to
/// setting properties to @b comms::field::Bitfield (see @ref page_fields_properties_bitfield).
/// The properties of the member fields are assigned using
/// comms_champion::property::field::Bundle::add() member function.
/// For example take a look at definition of @b field4 of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message. The properties for the bundle field are assigned using
/// the following code (see
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Lists.cpp">cc_plugin/message/Lists.cpp</a>).
/// @code
/// QVariantMap createField4Properties()
/// {
///     ...
///     cc::property::field::ForField<ListsFields::field4::ValueType::value_type>()
///         .name("element")
///         .add(cc::property::field::IntValue().name("memeber1").asMap())
///         .add(cc::property::field::IntValue().name("memeber2").asMap())
///         .serialisedHidden()
///         .asMap()
///     ...
/// }
/// @endcode
/// 
/// @section page_fields_properties_string Properties for comms::field::String
/// The comms_champion::property::field::String properties definition class 
/// doesn't have any extra properties in addition to @ref page_fields_properties_common
/// . For usage example, please take a look at
/// For example, take a look at fields definitions of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Strings.h">Strings</a>
/// message definition and defining properties to its field inside 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Strings.cpp">cc_plugin/message/Strings.cpp</a>.
///
/// @section page_fields_properties_array_list Properties for comms::field::ArrayList
/// The @b comms::field::ArrayList is a variable length field. It may
/// contain either raw bytes or variable number of fields of the same
/// type. To set the properties for @b comms::field::ArrayList fields, the
/// comms_champion::property::field::ArrayList can be used. In case of
/// storing raw bytes, there is no need for any extra properties except
/// ones listed in @ref page_fields_properties_common. Let's take a 
/// look at definition of @b field1 of 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message.
/// @code
/// // Raw data list that uses 2 bytes size prefix
/// using field1 =
///     comms::field::ArrayList<
///         FieldBase,
///         std::uint8_t,
///         comms::option::SequenceSizeFieldPrefix<
///             comms::field::IntValue<
///                 FieldBase,
///                 std::uint16_t
///             >
///         >
///     >;
/// @endcode
/// The properties for it are defined in 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Lists.cpp">cc_plugin/message/Lists.cpp</a>.
/// @code
/// QVariantList createFieldsProperties()
/// {
///     QVariantList props;
///     props.append(cc::property::field::ForField<ListsFields::field1>().name("field1").asMap());
///     ...
/// }
/// @endcode
/// When @b comms::field::ArrayList field contains other fields, there is 
/// a need to provide properties for the latter as well. The properties
/// for contained fields are added using comms_champion::property::field::ArrayList::add()
/// member function. Let's take a look at definition of @b field2 of the same
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message.
/// @code
/// // List of 2 bytes integer value fields, with fixed size of 3 elements
/// using field2 =
///     comms::field::ArrayList<
///         FieldBase,
///         comms::field::IntValue<
///             FieldBase,
///             std::int16_t
///         >,
///         comms::option::SequenceFixedSize<3>
///     >;
/// @endcode
/// The maximum number of the elements the list is going to store is known. It is 3.
/// Then, it is possible to assign different properties for each and every one
/// of them. The same
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Lists.cpp">cc_plugin/message/Lists.cpp</a>.
/// file contains the following code:
/// @code
/// QVariantMap createField2Properties()
/// {
///     typedef ListsFields::field2 Field2;
///     static const auto ElemCount =
///         Field2::ParsedOptions::SequenceFixedSize;
/// 
///     cc::property::field::ForField<ListsFields::field2> props;
///     props.name("field2");
/// 
///     for (auto idx = 0U; idx < ElemCount; ++idx) {
///         props.add(
///             cc::property::field::IntValue()
///                 .name(QString("element %1").arg(idx))
///                 .serialisedHidden()
///                 .asMap());
///     }
///     return props.asMap();
/// }
/// @endcode
/// Note, that comms_champion::property::field::ArrayList::add() member functions
/// was invoked multiple times providing different name for every contained
/// field.
///
/// Quite often the maximum number of fields the @b comms::field::ArrayList field
/// may contain is not known up front. In this case only one set of properties
/// should be added to comms_champion::property::field::ArrayList object, which
/// is going to be used for every displayed field that the list contains. As an
/// example, let's take a look at @b field3 of the same 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message.
/// @code
/// // List of 2 bytes integer value fields, prefixed with 2 bytes serialisation length
/// using field3 =
///     comms::field::ArrayList<
///         FieldBase,
///         comms::field::IntValue<
///             FieldBase,
///             std::uint16_t
///         >,
///         comms::option::SequenceSerLengthFieldPrefix<
///             comms::field::IntValue<
///                 FieldBase,
///                 std::uint16_t
///             >
///         >
///     >;
/// @endcode
/// The same
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Lists.cpp">cc_plugin/message/Lists.cpp</a>.
/// file contains the following properties setting code:
/// @code
/// QVariantMap createField3Properties()
/// {
///     return
///         cc::property::field::ForField<ListsFields::field3>()
///             .name("field3")
///             .add(cc::property::field::IntValue().name("element").serialisedHidden().asMap())
///             .asMap();
/// }
/// @endcode
///
/// Quite often the @b comms::field::ArrayList fields are prefixed with
/// number of elements to follow or serialisation length, just like @b field3
/// of the  
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Lists.h">Lists</a>
/// message mentioned earlier. Sometimes it would be convenient to hide 
/// the "serialised" information of the list itself (
/// on the right-hand side of the generated widget), but show one of the 
/// contained fields. In this case the information about the list's 
/// "prefix" part won't be displayed. To rectify this situation the
/// comms_champion::property::field::ArrayList class provides an ability
/// to show and name such prefix. Please use the following functions to 
/// provide such information:
/// @li comms_champion::property::field::ArrayList::showPrefix() 
/// @li comms_champion::property::field::ArrayList::prefixName()
/// 
/// @section page_fields_properties_optional Properties for comms::field::Optional
/// The properties for @b comms::field::Optional field are set using
/// comms_champion::property::field::Optional object. In addition
/// to @ref page_fields_properties_common it must also contain properties 
/// of the wrapped (contained) field. The properties of the latter are set
/// using comms_champion::property::field::Optional::field() member function.
///
/// @subsection page_fields_properties_optional_uncheckable "Uncheckable" Property
/// By default, the widget generated for the @b comms::field::Optional field
/// will have small check box which can be used to mark the field as "existing" or
/// "missing". However, most of the time the existence of the @b comms::field::Optional field
/// is determined by the value of some other field (such as bit in some bitmask). 
/// In this case, the user is not supposed to be able to use the described
/// checkbox. Adding the "uncheckable" property will hide it.
///
/// As an example, let's take a look at 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Optionals.h">Optionals</a>
/// message. The existance of its @b field2 and @b field3 fields is determined
/// by the value of the @b field1. The properties of the mentioned field are
/// set in 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Optionals.cpp">cc_plugin/message/Optionals.cpp</a>.
/// file.
/// @code
/// QVariantMap createField2Properties()
/// {
///     static const char* Name = "field2";
///     return
///         cc::property::field::ForField<OptionalsFields::field2>()
///             .name(Name)
///             .field(
///                 cc::property::field::ForField<OptionalsFields::field2::Field>()
///                     .name(Name)
///                     .asMap())
///             .uncheckable()
///             .asMap();
/// }
/// @endcode
/// Please note, that the example above sets the same name for @b the comms::field::Optional
/// field and the wrapped @b comms::field::IntValue field. The name assigned
/// to the @b the comms::field::Optional field will be displayed when the field
/// is "missing", but when it's marked as "existing", the widget of the 
/// wrapped @b comms::field::IntValue field is displayed, showing the name 
/// of the latter. 
///
/// @section page_fields_properties_float Properties for comms::field::FloatValue
/// The properties for @b comms::field::FloatValue are defined using 
/// comms_champion::property::field::FloatValue. Just like any other field
/// it has all the properties described in @ref page_fields_properties_common.
/// It also has one more.
///
/// @subsection page_fields_properties_float_decimals "Decimals" Properties
/// When displaying value of the @b comms::field::FloatValue field there is a 
/// need to know how many digits to display after the decimal point. The information
/// is provided using comms_champion::property::field::FloatValue::decimals()
/// member function. The
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/FloatValues.cpp">cc_plugin/message/FloatValues.cpp</a> 
/// file contains code setting properties for such fields used by
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/FloatValues.h">FloatValues</a>
/// message.
///
/// @section page_fields_properties_variant Properties for comms::field::Variant
/// The process of assigning properties for @b comms::field::Variant field is
/// very similar to setting properties to @b comms::field::Bundle (see
/// @ref page_fields_properties_bundle). The properties for all possible fields
/// the @b comms::field::Variant may contain are added using 
/// comms_champion::property::field::Variant::add() member function in the order
/// of their definition inside the provided @b std::tuple.
///
/// @subsection page_fields_properties_variant_index_hidden "IndexHidden" Property.
/// When setting value of the @b comms::field::Variant field, the @b cc_view
/// (main GUI application) allows choice of the actual field type using spin box
/// with type index. However, when the widget has been created and displayed in
/// "read only" mode such index may be hidden using described property. Use
/// comms_champion::property::field::Variant::indexHidden() member function to
/// set it. For example please take a look at definition of the 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/include/demo/message/Variants.h">Variants</a>
/// message and the properties setting code inside
/// <a href="https://github.com/commschamp/comms_champion/blob/master/demo/cc_plugin/message/Variants.cpp">cc_plugin/message/Variants.cpp</a>
/// file.
