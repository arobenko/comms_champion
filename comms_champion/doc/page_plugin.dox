/// @page page_plugin Defining a Plugin
/// @tableofcontents
/// The @b CommsChampion project uses
/// <a href="http://doc.qt.io/qt-5/qtplugin.html">QT5 Infrastructure</a>
/// to define and load plugins. The custom plugin definition shared object needs
/// to contain its own @b Plugin class that inherits from comms_champion::Plugin and
/// uses various QT5 macros to describe itself. As an example please take
/// a look at
/// <a href="https://github.com/commschamp/comms_champion/blob/master/comms_champion/plugin/echo_socket/EchoSocketPlugin.h">EchoSocketPlugin.h</a> 
/// from this project.
/// @code
/// class EchoSocketPlugin : public comms_champion::Plugin
/// {
///     Q_OBJECT
///     Q_PLUGIN_METADATA(IID "cc.EchoSocketPlugin" FILE "echo_socket.json")
///     Q_INTERFACES(comms_champion::Plugin)
///     ...
/// };
/// @endcode
/// It must contain 
/// <a href="http://doc.qt.io/qt-5/qtplugin.html#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA()</a> 
/// macro with unique ID of the plugin and
/// name of the file that contains a detailed plugin description. The file contents
/// are expected to be a valid 
/// <a href="https://www.w3schools.com/js/js_json_objects.asp">JSON object</a> with
/// three values:
/// @li @b name - Short, human readable name of the plugin
/// @li @b desc - Multi line description of the plugin. The value is expected to
///     be <a href="https://www.w3schools.com/js/js_json_arrays.asp">JSON array</a> 
///     of strings.
/// @li @b type - Type of the plugin, can be one of the following: @b socket, 
///     @b filter, or @b protocol.
///
/// Please take a look at 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/comms_champion/plugin/echo_socket/echo_socket.json">echo_socket.json</a>
/// as an example.
/// @code
/// {
///     "name" : "Echo Socket",
///     "desc" : [
///         "This socket duplicates outgoing data and echoes it as an incoming one."
///     ],
///     "type" : "socket"
/// }
/// @endcode
/// The plugin definition class must also contain explicit declaration of implementing
/// comms_champion::Plugin interface using
/// <a href="http://doc.qt.io/qt-5/qobject.html#Q_INTERFACES">Q_INTERFACES()</a>
/// macro.
///
/// Also, don't forget to use 
/// <a href="http://doc.qt.io/qt-5/qobject.html#Q_OBJECT">Q_OBJECT</a>
/// macro and run 
/// <a href="http://doc.qt.io/qt-5/why-moc.html">moc</a>
/// utility on the header when building the plugin's shared library.
///
/// @section page_plugin_configuration Plugin Configuration
/// Some plugins may require an ability to be configured. For example, remote address
/// and/or port for TCP/IP client socket.
///
/// The <a href="https://github.com/commschamp/comms_champion#commschampion-tools">CommsChampion Tools</a> 
/// implement an ability to save and load the list of plugins with their
/// respective configurations. Such list as well as plugins' configurations are
/// stored in single file as human readable 
/// <a href="https://www.w3schools.com/js/js_json_objects.asp">json object</a>.
/// The QT5 framework implements its own parsing and handling of such files. The
/// parsed json object is returned as 
/// <a href="http://doc.qt.io/qt-5/qvariant.html#QVariantMap-typedef">QVariantMap</a>.
/// When requested, every plugin must be able to provide its own configuration
/// by filling the given @b QVariantMap object as well as retrieve and apply the new
/// configuration from it.
///
/// The comms_champion::Plugin class is implemented using  
/// <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface">Non-Virtual Interface Idiom</a>
/// It's non-virtual public interface is used by the driving application. The
/// inheriting class needs to implement virtual @b *Impl() functions to override
/// the default behaviour.
///
/// The comms_champion::Plugin class defines the following virtual functions
/// that are used for getting / setting the plugin's configuration.
/// @code
/// namespace comms_champion
/// {
/// class Plugin : public QObject
/// {
///     ...
/// protected:
///     // Retrieve current configuration
///     virtual void getCurrentConfigImpl(QVariantMap& config);
///
///     // Apply new configuration
///     virtual void reconfigureImpl(const QVariantMap& config);
/// };
/// } // namespace comms_champion
/// @endcode
/// If the custom plugin being implemented requires external configuration,
/// the inheriting class is expected to override these functions. It is 
/// recommended that the plugin will bundle its full configuration as
/// single @b QVariantMap object, which will be inserted as one value into
/// the provided @b QVariantMap full configuration object. For example,
/// let's take a look at 
/// <a href="https://github.com/commschamp/comms_champion/blob/master/comms_champion/plugin/tcp_socket/client/SocketPlugin.cpp">TCP/IP Client Socket</a>
/// plugin configuration:
/// @code
/// const QString MainConfigKey("cc_tcp_client_socket");
/// const QString HostSubKey("host");
/// const QString PortSubKey("port");
///
/// void SocketPlugin::getCurrentConfigImpl(QVariantMap& config)
/// {
///     ...
/// 
///     // Create QVariantMap to contain plugin configuration
///     QVariantMap subConfig; 
/// 
///     // Store host address and port info
///     subConfig.insert(HostSubKey, m_socket->getHost()); 
///     subConfig.insert(PortSubKey, m_socket->getPort()); 
///
///     // Insert the configuration map as single value into provided full configuration map
///     config.insert(MainConfigKey, QVariant::fromValue(subConfig)); 
/// }
///
/// void SocketPlugin::reconfigureImpl(const QVariantMap& config)
/// {
///     // Retrieve the relevant configuration containing object
///     auto subConfigVar = config.value(MainConfigKey);
///     if ((!subConfigVar.isValid()) || (!subConfigVar.canConvert<QVariantMap>())) {
///         return;
///     }
///     auto subConfig = subConfigVar.value<QVariantMap>();
/// 
///     ...
/// 
///     // Retrieve and configure the remote host address
///     auto hostVar = subConfig.value(HostSubKey);
///     if (hostVar.isValid() && hostVar.canConvert<QString>()) {
///         auto host = hostVar.value<QString>();
///         m_socket->setHost(host);
///     }
/// 
///     // Retrieve and configure the remote port number
///     typedef Socket::PortType PortType;
///     auto portVar = subConfig.value(PortSubKey);
///     if (portVar.isValid() && portVar.canConvert<PortType>()) {
///         auto port = portVar.value<PortType>();
///         m_socket->setPort(port);
///     }
/// }
/// @endcode
///
/// @section page_plugin_properties Plugin Properties
/// In addition to explained above configuration, the plugin is expected to 
/// apply extra properties which will allow the running application to use
/// it properly. The comms_champion::Plugin class provides an access to
/// comms_champion::PluginProperties object, which is stored as its data member.
/// @code
/// namespace comms_champion
/// {
/// class Plugin : public QObject
/// {
///     ...
/// protected:
///     // Get access to properties object
///     PluginProperties& pluginProperties();
/// 
/// private:
///     PluginProperties m_props;
/// };
/// }  // namespace comms_champion
/// @endcode
/// The deriving @b Plugin class is expected to grab a hold on the properties
/// object and apply its relevant properties.
/// @code
/// class MyPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MyPlugin()
///     {
///         pluginProperties()
///             .setSocketCreateFunc(
///                 [this]() -> comms_champion::SocketPtr
///                 {
///                     ...
///                 })
///             .setConfigWidgetCreateFunc(
///                 [this]() -> QWidget*
///                 {
///                     ...
///                 });
///     }
///     ...
/// };
/// @endcode
/// Let's take a look at available properties one by one.
///
/// @subsection page_plugin_properties_socket Socket Allocation Callback
/// The @b Socket plugin (see @ref page_socket_plugin) is expected to be able
/// to create and return comms_champion::Socket object when requested. However, it is up to
/// the application to decide when. As the result, the actual plugin class 
/// needs to provide a callback to be called when new comms_champion::Socket
/// object is required. It is done using call to 
/// comms_champion::PluginProperties::setSocketCreateFunc().
/// @code
/// class MySocketPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MySocketPlugin()
///     {
///         pluginProperties()
///             .setSocketCreateFunc(
///                 [this]() -> comms_champion::SocketPtr
///                 {
///                     ...
///                 });
///     }
///     ...
/// };
/// @endcode
///
/// @subsection page_plugin_properties_protocol Protocol Allocation Callback
/// The @b Protocol plugin (see @ref page_protocol_plugin) is expected to be able
/// to create and return comms_champion::Protocol object when requested. However, it is up to
/// the application to decide when. As the result, the actual plugin class 
/// needs to provide a callback to be called when new comms_champion::Protocol
/// object is required. It is done using call to 
/// comms_champion::PluginProperties::setProtocolCreateFunc().
/// @code
/// class MyProtocolPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MyProtocolPlugin()
///     {
///         pluginProperties()
///             .setProtocolCreateFunc(
///                 [this]() -> comms_champion::ProtocolPtr
///                 {
///                     ...
///                 });
///     }
///     ...
/// };
/// @endcode
///
/// @subsection page_plugin_properties_filter Filter Allocation Callback
/// The @b Filter plugin (see @ref page_filter_plugin) is expected to be able
/// to create and return comms_champion::Filter object when requested. However, it is up to
/// the application to decide when. As the result, the actual plugin class 
/// needs to provide a callback to be called when new comms_champion::Filter
/// object is required. It is done using call to 
/// comms_champion::PluginProperties::setFiltersCreateFunc().
/// @code
/// class MyFilterPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MyFilterPlugin()
///     {
///         pluginProperties()
///             .setFiltersCreateFunc(...);
///     }
///     ...
/// };
/// @endcode
/// 
/// @subsection page_plugin_properties_config_widget Configuration Widget
/// As was mentioned earlier, the plugin may require some configuration. The
/// command line application will receive required parameters via command line
/// arguments. The GUI application, on the other hand, must provide a convenient 
/// way to allow user to perform such configuration. 
///
/// The developed plugins are expected to be used "as-is" with any of the 
/// <a href="https://github.com/commschamp/comms_champion#commschampion-tools">CommsChampion Tools</a>
/// applications, both GUI and command-line ones. As the result, the developed
/// plugin is expected to be able to create and return a widget object, which will be
/// displayed by the GUI application at some stage. If plugin requires configuration
/// it should also provide a callback to allow creation of such widget.
/// Use comms_champion::PluginProperties::setConfigWidgetCreateFunc() function
/// to set the callback.
/// @code
/// class MyPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MyPlugin()
///     {
///         pluginProperties()
///             .setConfigWidgetCreateFunc(
///                 [this]() -> QWidget*
///                 {
///                     return new MyConfigWidget(...);
///                 });
///     }
///     ...
/// };
/// @endcode
/// @b NOTE, that the callback returns dynamically allocated widget object,
/// which will be @b owned by the running application. The plugin does @b NOT need
/// to store the pointer and delete it later.
/// 
/// @subsection page_plugin_properties_gui_actions GUI Actions
/// For user's convenience, the plugin may also create multiple 
/// <a href="http://doc.qt.io/qt-5/qaction.html">QAction</a> objects.
/// This objects will be inserted into main toolbar of the GUI application allowing
/// users to perform quick updates / notifications to the running plugins.
/// Use comms_champion::PluginProperties::setGuiActionsCreateFunc() function
/// to set the callback.
/// @code
/// class MyPlugin : public comms_champion::Plugin
/// {
///     ...
/// public:
///     MyPlugin()
///     {
///         pluginProperties()
///             .setGuiActionsCreateFunc(...);
///     }
///     ...
/// };
/// @endcode
/// 

